{"index":{"version":"2.1.0","fields":["title","body"],"fieldVectors":[["title/uuid/index.html",[0,0.074]],["body/uuid/index.html",[0,0.135,1,0.477,2,0.559,3,0.677,4,0.756,5,0.836,6,0.836,7,0.559,8,0.896,9,0.559,10,0.559,11,0.559,12,0.559,13,0.559,14,0.559,15,0.559,16,0.559,17,0.559,18,0.559,19,0.559,20,0.559,21,0.559,22,1.501,23,0.559,24,0.559,25,0.559,26,0.896,27,0.559,28,0.896,29,0.559,30,0.896,31,0.836,32,0.896,33,0.559,34,0.559,35,0.559,36,0.559,37,0.896,38,0.559,39,0.559,40,0.559,41,0.836,42,0.836,43,0.559,44,0.559,45,0.836,46,0.559,47,0.559,48,0.559,49,0.559,50,0.559,51,0.836,52,0.559,53,0.559,54,0.559]],["title/uuid/index.html#引言",[1,0.234]],["body/uuid/index.html#引言",[0,0.148,1,0.475,2,1.304,3,0.56,4,0.878,55,1.951]],["title/uuid/index.html#UUID",[3,0.442]],["body/uuid/index.html#UUID",[1,0.465,3,0.714,7,0.807,8,1.19,9,0.807,10,0.807,11,0.807,12,0.807,13,0.807,14,0.807,15,0.807,16,0.807,17,0.807,18,0.807,19,0.807,20,0.807,21,0.807,22,1.741,23,0.807,24,0.807,25,0.807,26,1.19,27,0.807,28,1.19,29,0.807,30,1.19,32,1.19,33,0.807,34,0.807,35,0.807,36,0.807,37,1.19,38,0.807,39,0.807,40,0.807,56,1.207,57,1.207,58,1.207]],["title/uuid/index.html#数据库自增ID",[0,0.074]],["body/uuid/index.html#数据库自增ID",[1,0.466,43,1.607]],["title/uuid/index.html#雪花算法-1",[1,0.234]],["body/uuid/index.html#雪花算法-1",[0,0.126,1,0.398,4,1.18,44,1.43,46,1.43,47,1.43,48,1.43,49,1.43,50,1.43,59,2.139]],["title/uuid/index.html#方案对比",[1,0.234]],["body/uuid/index.html#方案对比",[0,0.145,1,0.458,52,1.41,53,1.41,54,1.41,60,2.11]]],"invertedIndex":[["",{"_index":1,"title":{"uuid/index.html#引言":{},"uuid/index.html#雪花算法-1":{},"uuid/index.html#方案对比":{}},"body":{"uuid/index.html":{},"uuid/index.html#引言":{},"uuid/index.html#UUID":{},"uuid/index.html#数据库自增ID":{},"uuid/index.html#雪花算法-1":{},"uuid/index.html#方案对比":{}}}],["1",{"_index":26,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["1&#x2f;2",{"_index":41,"title":{},"body":{"uuid/index.html":{}}}],["1.uuid",{"_index":14,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["1/2",{"_index":57,"title":{},"body":{"uuid/index.html#UUID":{}}}],["12",{"_index":23,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["1~2位）作为回拨位，一旦时钟回拨，将回拨位加1，可得到不一样的id，2",{"_index":50,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#雪花算法-1":{}}}],["2",{"_index":28,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["2.uuid",{"_index":24,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["2275",{"_index":17,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["3",{"_index":30,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["3&#x2f;5",{"_index":42,"title":{},"body":{"uuid/index.html":{}}}],["3.uuid",{"_index":34,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["3/5",{"_index":58,"title":{},"body":{"uuid/index.html#UUID":{}}}],["4",{"_index":22,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["4163",{"_index":18,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["467e8542",{"_index":16,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["5",{"_index":32,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["5m",{"_index":49,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#雪花算法-1":{}}}],["64",{"_index":46,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#雪花算法-1":{}}}],["64bit",{"_index":44,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#雪花算法-1":{}}}],["7adc205580a9",{"_index":20,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["8",{"_index":21,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["95d6",{"_index":19,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["amp",{"_index":4,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#引言":{},"uuid/index.html#雪花算法-1":{}}}],["bit分为了四部分。其中时间戳有时间上限（69年）。机器id只有10位，能记录1024台机器，常用前几位表示数据中心id，后几位表示数据中心内的机器id。序列号用来对同一个毫秒之内的操作产生不同的id，最多4095",{"_index":47,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#雪花算法-1":{}}}],["id",{"_index":0,"title":{"uuid/index.html":{},"uuid/index.html#数据库自增ID":{}},"body":{"uuid/index.html":{},"uuid/index.html#引言":{},"uuid/index.html#雪花算法-1":{},"uuid/index.html#方案对比":{}}}],["identifier（通用唯一识别码），有的地方也称作guid（glob",{"_index":9,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["identifier），实际上guid指微软对于uuid",{"_index":10,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["id可能是大家最熟悉的一种唯一id",{"_index":43,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#数据库自增ID":{}}}],["id来进行标识：用户需要唯一身份标识；商品需要唯一标识；消息需要唯一标识；事件需要唯一标识…等等，都需要全局唯一id",{"_index":2,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#引言":{}}}],["id生成思路基本是利用一个长串数字或字符串，将其分割成多个部分，分别记录时间信息、机器&#x2f;名字信息、随机信息、序列信息等。时间信息部分决定了该策略能使用的时长，机器&#x2f;名字信息支持了分布式环境下的独自生成唯一id与识别能力，序列信息保证了事件的顺序记录以及同一时间单位下的并发数，而随机信息则加大了id",{"_index":51,"title":{},"body":{"uuid/index.html":{}}}],["id生成思路基本是利用一个长串数字或字符串，将其分割成多个部分，分别记录时间信息、机器/名字信息、随机信息、序列信息等。时间信息部分决定了该策略能使用的时长，机器/名字信息支持了分布式环境下的独自生成唯一id与识别能力，序列信息保证了事件的顺序记录以及同一时间单位下的并发数，而随机信息则加大了id",{"_index":60,"title":{},"body":{"uuid/index.html#方案对比":{}}}],["id（如各业务操作流水id",{"_index":54,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#方案对比":{}}}],["mac地址，因此会暴露mac",{"_index":35,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["md5",{"_index":38,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["md5&#x2f;sha1",{"_index":6,"title":{},"body":{"uuid/index.html":{}}}],["md5/sha1",{"_index":55,"title":{},"body":{"uuid/index.html#引言":{}}}],["qps约为400w&#x2f;",{"_index":45,"title":{},"body":{"uuid/index.html":{}}}],["qps约为400w/",{"_index":59,"title":{},"body":{"uuid/index.html#雪花算法-1":{}}}],["qps高（支持100n",{"_index":12,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["sha1",{"_index":40,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["string存储，占空间，db",{"_index":13,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["twitter的分法，但实际上这种算法使用可以很灵活，根据自身业务的并发情况、机器分布、使用年限等，可以自由地重新决定各部分的位数，从而增加或减少某部分的量级。比如百度的uidgenerator、美团的leaf",{"_index":48,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#雪花算法-1":{}}}],["uniqu",{"_index":8,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["uuid",{"_index":3,"title":{"uuid/index.html#UUID":{}},"body":{"uuid/index.html":{},"uuid/index.html#引言":{},"uuid/index.html#UUID":{}}}],["uuid全称为：univers",{"_index":7,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["uuid是唯一的；相同名字空间及名字下得到的uuid",{"_index":37,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["uuid版本以供使用，分别对应于不同的uuid",{"_index":25,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["uuid的标准形式为32",{"_index":15,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["uuid算法的目的是为了生成某种形式的全局唯一id来标识系统中的任一元素，尤其在分布式环境下，该id需要不依赖中心认证即可自动生成全局唯一id",{"_index":11,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["uuid（md5",{"_index":36,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["uuid（md5版）：基于指定的名字空间&#x2f;名字生成md5",{"_index":31,"title":{},"body":{"uuid/index.html":{}}}],["uuid（md5版）：基于指定的名字空间/名字生成md5",{"_index":56,"title":{},"body":{"uuid/index.html#UUID":{}}}],["uuid（sha1",{"_index":39,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["uuid（sha1版）：将版本3的散列算法改为sha1",{"_index":33,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["uuid（如基于不可变信息生成的用户id，若不小心删除，仍可根据信息重新生成同一id",{"_index":53,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#方案对比":{}}}],["uuid（如游戏聊天室中不同用户的身份id",{"_index":52,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#方案对比":{}}}],["uuid：主要依赖当前的时间戳及机器mac",{"_index":27,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["uuid：将版本1的时间戳前四位换为posix的uid或gid",{"_index":29,"title":{},"body":{"uuid/index.html":{},"uuid/index.html#UUID":{}}}],["x2f",{"_index":5,"title":{},"body":{"uuid/index.html":{}}}]],"pipeline":["stemmer"]},"store":{"uuid/index.html":{"title":"唯一ID生成算法剖析","path":"/uuid/index.html","body":"引言 在业务开发中，大量场景需要唯一ID来进行标识：用户需要唯一身份标识；商品需要唯一标识；消息需要唯一标识；事件需要唯一标识…等等，都需要全局唯一ID，尤其是分布式场景下。 唯一ID有哪些特性或者说要求呢？按照我的分析有以下特性： 唯一性：生成的ID全局唯一，在特定范围内冲突概率极小 有序性：生成的ID按某种规则有序，便于数据库插入及排序 可用性：可保证高并发下的可用性 自主性：分布式环境下不依赖中心认证即可自行生成ID 安全性：不暴露系统和业务的信息 一般来说，常用的唯一ID生成方法有这些： UUID： 基于时间戳&amp;时钟序列生成 基于名字空间&#x2F;名字的散列值 (MD5&#x2F;SHA1) 生成 基于随机数生成 数据库自增ID： 多台机器不同初始值、同步长自增 批量缓存自增ID 雪花算法 时钟回拨解决方案 本文便分别对这些算法进行讲解及分析。 UUID UUID全称为：Universally Unique IDentifier（通用唯一识别码），有的地方也称作GUID（Globally Unique IDentifier），实际上GUID指微软对于UUID标准的实现的实现。 UUID算法的目的是为了生成某种形式的全局唯一ID来标识系统中的任一元素，尤其在分布式环境下，该ID需要不依赖中心认证即可自动生成全局唯一ID。 其优势有： 无需网络，单机自行生成 速度快，QPS高（支持100ns级并发） 各语言均有相应实现库供直接使用 而缺点为： String存储，占空间，DB查询及索引效率低 无序，可读性差 根据实现方式不同可能泄露信息 1.UUID的格式 UUID的标准形式为32个十六进制数组成的字符串，且分隔为五个部分，如： 467e8542-2275-4163-95d6-7adc205580a9 各部分的数字个数为：8-4-4-4-12 2.UUID版本 根据需要不同，标准提供了不同的UUID版本以供使用，分别对应于不同的UUID生成规则： 版本1 - 基于时间的UUID：主要依赖当前的时间戳及机器mac地址，因此可以保证全球唯一性 版本2 - 分布式安全的UUID：将版本1的时间戳前四位换为POSIX的UID或GID，很少使用 版本3 - 基于名字空间的UUID（MD5版）：基于指定的名字空间&#x2F;名字生成MD5散列值得到，标准不推荐 版本4 - 基于随机数的UUID：基于随机数或伪随机数生成， 版本5 - 基于名字空间的UUID（SHA1版）：将版本3的散列算法改为SHA1 3.UUID各版本优缺点 版本1 - 基于时间的UUID： 优点：能基本保证全球唯一性 缺点：使用了Mac地址，因此会暴露Mac地址和生成时间 版本2 - 分布式安全的UUID： 优点：能保证全球唯一性 缺点：很少使用，常用库基本没有实现 版本3 - 基于名字空间的UUID（MD5版）： 优点：不同名字空间或名字下的UUID是唯一的；相同名字空间及名字下得到的UUID保持重复。 缺点：MD5碰撞问题，只用于向后兼容，后续不再使用 版本4 - 基于随机数的UUID： 优点：实现简单 缺点：重复几率可计算 版本5 - 基于名字空间的UUID（SHA1版）： 优点：不同名字空间或名字下的UUID是唯一的；相同名字空间及名字下得到的UUID保持重复。 缺点：SHA1计算相对耗时 总得来说： 版本 1&#x2F;2 适用于需要高度唯一性且无需重复的场景； 版本 3&#x2F;5 适用于一定范围内唯一且需要或可能会重复生成UUID的环境下； 版本 4 适用于对唯一性要求不太严格且追求简单的场景。 数据库自增ID 数据库自增ID可能是大家最熟悉的一种唯一ID生成方式，其具有使用简单，满足基本需求，天然有序的优点，但也有缺陷： 并发性不好 数据库写压力大 数据库故障后不可使用 存在数量泄露风险 雪花算法 定义一个64bit的数，对指定机器 &amp; 同一时刻 &amp; 某一并发序列，是唯一的，其极限QPS约为400w&#x2F;s 将64 bit分为了四部分。其中时间戳有时间上限（69年）。机器id只有10位，能记录1024台机器，常用前几位表示数据中心id，后几位表示数据中心内的机器id。序列号用来对同一个毫秒之内的操作产生不同的ID，最多4095个。 这种结构是雪花算法提出者Twitter的分法，但实际上这种算法使用可以很灵活，根据自身业务的并发情况、机器分布、使用年限等，可以自由地重新决定各部分的位数，从而增加或减少某部分的量级。比如百度的UidGenerator、美团的Leaf等，都是基于雪花算法做一些适合自身业务的变化。 由于雪花算法是强依赖于时间的，在分布式环境下，如果发生时钟回拨，很可能会引起id冲突的问题。解决方案有： 将ID生成交给少量服务器，并关闭时钟同步。 直接报错，交给上层业务处理。 如果回拨时间较短，在耗时要求内，比如5ms，那么等待回拨时长后再进行生成。 如果回拨时间很长，那么无法等待，可以匀出少量位（1~2位）作为回拨位，一旦时钟回拨，将回拨位加1，可得到不一样的ID，2位回拨位允许标记三次时钟回拨，基本够使用。如果超出了，可以再选择抛出异常。 方案对比 可以发现，常用的分布式唯一ID生成思路基本是利用一个长串数字或字符串，将其分割成多个部分，分别记录时间信息、机器&#x2F;名字信息、随机信息、序列信息等。时间信息部分决定了该策略能使用的时长，机器&#x2F;名字信息支持了分布式环境下的独自生成唯一ID与识别能力，序列信息保证了事件的顺序记录以及同一时间单位下的并发数，而随机信息则加大了ID整体的不可识别性。 实际上如果现有的方法依然不能满足，我们完全可以依据自身业务和发展需求，来自行决定使用何种策略生成唯一ID。各种方案都有其优缺点，技术的使用没有绝对的好坏之分，主要在于是否适合使用场景： 要求生成全局唯一且不会重复ID，不关心顺序 —— 使用基于时间的UUID（如游戏聊天室中不同用户的身份ID） 要求生成唯一ID，具有名称不可变性，可重复生成 —— 使用基于名称哈希的UUID（如基于不可变信息生成的用户ID，若不小心删除，仍可根据信息重新生成同一ID） 要求生成有序且自然增长的ID —— 使用数据库自增ID（如各业务操作流水ID，高并发下可参考优化方案） 要求生成数值型无序定长ID —— 使用雪花算法（如对存储空间、查询效率、传输数据量等有较高要求的场景）"},"uuid/index.html#引言":{"title":"引言","path":"/uuid/index.html#引言","body":"在业务开发中，大量场景需要唯一ID来进行标识：用户需要唯一身份标识；商品需要唯一标识；消息需要唯一标识；事件需要唯一标识…等等，都需要全局唯一ID，尤其是分布式场景下。 唯一ID有哪些特性或者说要求呢？按照我的分析有以下特性： 唯一性：生成的ID全局唯一，在特定范围内冲突概率极小 有序性：生成的ID按某种规则有序，便于数据库插入及排序 可用性：可保证高并发下的可用性 自主性：分布式环境下不依赖中心认证即可自行生成ID 安全性：不暴露系统和业务的信息 一般来说，常用的唯一ID生成方法有这些： UUID： 基于时间戳&amp;时钟序列生成 基于名字空间/名字的散列值 (MD5/SHA1) 生成 基于随机数生成 数据库自增ID： 多台机器不同初始值、同步长自增 批量缓存自增ID 雪花算法 时钟回拨解决方案 本文便分别对这些算法进行讲解及分析。"},"uuid/index.html#UUID":{"title":"UUID","path":"/uuid/index.html#UUID","body":"UUID全称为：Universally Unique IDentifier（通用唯一识别码），有的地方也称作GUID（Globally Unique IDentifier），实际上GUID指微软对于UUID标准的实现的实现。 UUID算法的目的是为了生成某种形式的全局唯一ID来标识系统中的任一元素，尤其在分布式环境下，该ID需要不依赖中心认证即可自动生成全局唯一ID。 其优势有： 无需网络，单机自行生成 速度快，QPS高（支持100ns级并发） 各语言均有相应实现库供直接使用 而缺点为： String存储，占空间，DB查询及索引效率低 无序，可读性差 根据实现方式不同可能泄露信息 1.UUID的格式 UUID的标准形式为32个十六进制数组成的字符串，且分隔为五个部分，如： 467e8542-2275-4163-95d6-7adc205580a9 各部分的数字个数为：8-4-4-4-12 2.UUID版本 根据需要不同，标准提供了不同的UUID版本以供使用，分别对应于不同的UUID生成规则： 版本1 - 基于时间的UUID：主要依赖当前的时间戳及机器mac地址，因此可以保证全球唯一性 版本2 - 分布式安全的UUID：将版本1的时间戳前四位换为POSIX的UID或GID，很少使用 版本3 - 基于名字空间的UUID（MD5版）：基于指定的名字空间/名字生成MD5散列值得到，标准不推荐 版本4 - 基于随机数的UUID：基于随机数或伪随机数生成， 版本5 - 基于名字空间的UUID（SHA1版）：将版本3的散列算法改为SHA1 3.UUID各版本优缺点 版本1 - 基于时间的UUID： 优点：能基本保证全球唯一性 缺点：使用了Mac地址，因此会暴露Mac地址和生成时间 版本2 - 分布式安全的UUID： 优点：能保证全球唯一性 缺点：很少使用，常用库基本没有实现 版本3 - 基于名字空间的UUID（MD5版）： 优点：不同名字空间或名字下的UUID是唯一的；相同名字空间及名字下得到的UUID保持重复。 缺点：MD5碰撞问题，只用于向后兼容，后续不再使用 版本4 - 基于随机数的UUID： 优点：实现简单 缺点：重复几率可计算 版本5 - 基于名字空间的UUID（SHA1版）： 优点：不同名字空间或名字下的UUID是唯一的；相同名字空间及名字下得到的UUID保持重复。 缺点：SHA1计算相对耗时 总得来说： 版本 1/2 适用于需要高度唯一性且无需重复的场景； 版本 3/5 适用于一定范围内唯一且需要或可能会重复生成UUID的环境下； 版本 4 适用于对唯一性要求不太严格且追求简单的场景。"},"uuid/index.html#数据库自增ID":{"title":"数据库自增ID","path":"/uuid/index.html#数据库自增ID","body":"数据库自增ID可能是大家最熟悉的一种唯一ID生成方式，其具有使用简单，满足基本需求，天然有序的优点，但也有缺陷： 并发性不好 数据库写压力大 数据库故障后不可使用 存在数量泄露风险"},"uuid/index.html#雪花算法-1":{"title":"雪花算法","path":"/uuid/index.html#雪花算法-1","body":"定义一个64bit的数，对指定机器 &amp; 同一时刻 &amp; 某一并发序列，是唯一的，其极限QPS约为400w/s 将64 bit分为了四部分。其中时间戳有时间上限（69年）。机器id只有10位，能记录1024台机器，常用前几位表示数据中心id，后几位表示数据中心内的机器id。序列号用来对同一个毫秒之内的操作产生不同的ID，最多4095个。 这种结构是雪花算法提出者Twitter的分法，但实际上这种算法使用可以很灵活，根据自身业务的并发情况、机器分布、使用年限等，可以自由地重新决定各部分的位数，从而增加或减少某部分的量级。比如百度的UidGenerator、美团的Leaf等，都是基于雪花算法做一些适合自身业务的变化。 由于雪花算法是强依赖于时间的，在分布式环境下，如果发生时钟回拨，很可能会引起id冲突的问题。解决方案有： 将ID生成交给少量服务器，并关闭时钟同步。 直接报错，交给上层业务处理。 如果回拨时间较短，在耗时要求内，比如5ms，那么等待回拨时长后再进行生成。 如果回拨时间很长，那么无法等待，可以匀出少量位（1~2位）作为回拨位，一旦时钟回拨，将回拨位加1，可得到不一样的ID，2位回拨位允许标记三次时钟回拨，基本够使用。如果超出了，可以再选择抛出异常。"},"uuid/index.html#方案对比":{"title":"方案对比","path":"/uuid/index.html#方案对比","body":"可以发现，常用的分布式唯一ID生成思路基本是利用一个长串数字或字符串，将其分割成多个部分，分别记录时间信息、机器/名字信息、随机信息、序列信息等。时间信息部分决定了该策略能使用的时长，机器/名字信息支持了分布式环境下的独自生成唯一ID与识别能力，序列信息保证了事件的顺序记录以及同一时间单位下的并发数，而随机信息则加大了ID整体的不可识别性。 实际上如果现有的方法依然不能满足，我们完全可以依据自身业务和发展需求，来自行决定使用何种策略生成唯一ID。各种方案都有其优缺点，技术的使用没有绝对的好坏之分，主要在于是否适合使用场景： 要求生成全局唯一且不会重复ID，不关心顺序 —— 使用基于时间的UUID（如游戏聊天室中不同用户的身份ID） 要求生成唯一ID，具有名称不可变性，可重复生成 —— 使用基于名称哈希的UUID（如基于不可变信息生成的用户ID，若不小心删除，仍可根据信息重新生成同一ID） 要求生成有序且自然增长的ID —— 使用数据库自增ID（如各业务操作流水ID，高并发下可参考优化方案） 要求生成数值型无序定长ID —— 使用雪花算法（如对存储空间、查询效率、传输数据量等有较高要求的场景）"}}}